{
	"version": "2",
	"templates": [
		{
			"categories": [
				"Other",
				"Tools",
				"Authentication"
			],
			"description": "An open-source authentication and authorization server providing 2-factor authentication and single sign-on (SSO) for your applications via a web portal.",
			"env": [
				{
					"label": "TZ",
					"name": "TZ"
				}
			],
			"image": "authelia/authelia:latest",
			"logo": "https://github.com/Atlas34/portainer/raw/main/Images/authelia.png",
			"name": "authelia",
			"note": "Requires a configuration.yml file in order to work. Documentation is Available \u003ca href='https://docs.authelia.com/deployment/deployment-ha'\u003ehere\u003c/a\u003e.",
			"platform": "linux",
			"ports": [
				"9091:9091/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Authelia",
			"type": 1,
			"volumes": [
				{
					"bind": "/portainer/Authelia",
					"container": "/etc/authelia/"
				}
			]
		},
		{
			"categories": [
				"Tools",
				"Web",
				"Other"
			],
			"description": "Heimdall is a way to organise all those links to your most used web sites and web applications in a simple way.",
			"env": [
				{
					"default": "1000",
					"label": "PUID",
					"name": "PUID"
				},
				{
					"default": "100",
					"label": "PGID",
					"name": "PGID"
				}
			],
			"image": "lscr.io/linuxserver/heimdall:latest",
			"logo": "https://github.com/Atlas34/portainer/raw/main/Images/heimdall-icon.png",
			"name": "heimdall",
			"platform": "linux",
			"ports": [
				"80/tcp",
				"443/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Heimdall",
			"type": 1,
			"volumes": [
				{
					"bind": "/portainer/Heimdall",
					"container": "/config"
				}
			]
		},
		{
			"categories": [
				"Diagrams",
				"Tools"
			],
			"description": "draw.io (formerly Diagramly) is free online diagram software. You can use it as a flowchart maker, network diagram software, to create UML online, as an ER diagram tool, to design database schema, to build BPMN online, as a circuit diagram maker, and more. draw.io can import .vsdx, Gliffy™ and Lucidchart™ files.",
			"image": "fjudith/draw.io",
			"logo": "https://github.com/Atlas34/portainer/raw/main/Images/draw-io.png",
			"name": "drawio",
			"platform": "linux",
			"ports": [
				"8050:8080/tcp",
				"8543:8443/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Draw IO",
			"type": 1
		},
		{
			"categories": [
				"Proxy",
				"Tools"
			],
			"description": "Nginx Proxy Manager enables you to easily forward to your websites running at home or otherwise, including free SSL, without having to know too much about Nginx or Letsencrypt.",
			"image": "jlesage/nginx-proxy-manager",
			"logo": "https://github.com/Atlas34/portainer/raw/main/Images/proxy_mgr.png",
			"name": "nginx-proxy-manager",
			"platform": "linux",
			"ports": [
				"8080:80/tcp",
				"8081:81/tcp",
				"4443:443/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Nginx Proxy Manager",
			"type": 1,
			"volumes": [
				{
					"bind": "/portainer/Nginx-Proxy",
					"container": "/config"
				}
			]
		},
		{
			"categories": [
				"Other",
				"Tools"
			],
			"description": "Save recipes in seconds with plain text formatting and create beatiful recipe pages with automated ease.",
			"image": "gregyankovoy/chowdown:latest",
			"logo": "https://github.com/Atlas34/portainer/raw/main/Images/chowdown.png",
			"name": "chowdown",
			"platform": "linux",
			"ports": [
				"4000:4000/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Chowdown",
			"type": 1,
			"volumes": [
				{
					"bind": "/portainer/Chowdown",
					"container": "/config"
				}
			]
		},
		{
			"categories": [
				"Other",
				"Tools",
        "Wiki"
			],
			"description": "A modern, lightweight and powerful wiki app built on NodeJS.",
			"env": [
				{
					"label": "TZ",
					"name": "TZ"
				},
				{
					"default": "1000",
					"label": "PUID",
					"name": "PUID"
				},
				{
					"default": "100",
					"label": "PGID",
					"name": "PGID"
				}
			],
			"image": "lscr.io/linuxserver/wikijs:latest",
			"logo": "https://github.com/Atlas34/portainer/raw/main/Images/wikijs.png",
			"name": "wikijs",
			"platform": "linux",
			"ports": [
				"3000:3000/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "WikiJS",
			"type": 1,
			"volumes": [
				{
					"bind": "/portainer/WikiJS/data",
					"container": "/data"
				},
				{
					"bind": "/portainer/WikiJS/config",
					"container": "/config"
				}
			]
		},
		{
			"categories": [
				"DNS",
				"Certificates",
				"Tools"
			],
			"description": "Duck DNS + Let's Encrypt is a free service which will point a DNS (sub domains of duckdns.org) to an IP of your choice. The service is completely free, and doesn't require reactivation or forum posts to maintain its existence.\r\n\r\nFirst, go to duckdns site, register your subdomain and retrieve your token\r\nThen run the docker create command above with your subdomain(s) and token\r\nIt will update your IP with the DuckDNS service every 5 minutes\r\n\r\n",
			"env": [
				{
					"label": "DUCKDNS_DOMAIN",
					"name": "DUCKDNS_DOMAIN",
					"set": ""
				},
				{
					"label": "DUCKDNS_TOKEN",
					"name": "DUCKDNS_TOKEN",
					"set": ""
				},
				{
					"default": "5",
					"label": "DUCKDNS_DELAY",
					"name": "DUCKDNS_DELAY"
				},
				{
					"label": "LETSENCRYPT_DOMAIN (Optional)",
					"name": "LETSENCRYPT_DOMAIN",
					"set": ""
				},
				{
					"default": "false",
					"label": "LETSENCRYPT_WILDCARD (Optional)",
					"name": "LETSENCRYPT_WILDCARD",
				},
				{
					"label": "LETSENCRYPT_EMAIL (Optional)",
					"name": "LETSENCRYPT_EMAIL",
					"set": ""
				},
				{
					"default": "false",
					"label": "TESTING (Optional)",
					"name": "TESTING",
				},
				{
					"default": "0",
					"label": "PUID (Optional)",
					"name": "PUID"
				},
				{
					"default": "0",
					"label": "PGID (Optional)",
					"name": "PGID"
				}
			],
			"image": "maksimstojkovic/letsencrypt:latest",
			"logo": "https://github.com/Atlas34/portainer/raw/main/Images/duckdns.png",
			"name": "duckdns_letsencrypt",
			"platform": "linux",
			"restart_policy": "unless-stopped",
			"title": "Duck DNS + Let's Encrypt",
			"type": 1
		},
		{
			"categories": [
				"Other"
			],
			"description": "A free, self-hostable rss aggregator…",
			"env": [
				{
					"default": "1000",
					"label": "PUID",
					"name": "PUID"
				},
				{
					"default": "100",
					"label": "PGID",
					"name": "PGID"
				}
			],
			"image": "lscr.io/linuxserver/freshrss:latest",
			"logo": "https://github.com/Atlas34/portainer/raw/main/Images/freshrss-icon.png",
			"name": "freshrss",
			"platform": "linux",
			"ports": [
				"80:8020/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "FreshRSS",
			"type": 1,
			"volumes": [
				{
					"bind": "/portainer/FreshRSS",
					"container": "/config"
				}
			]
		},
		{
			"categories": [
				"Other",
				"Tools"
			],
			"description": "A Linux network-level advertisement and Internet tracker blocking application which acts as a DNS sinkhole.",
			"image": "pihole/pihole:latest",
			"logo": "https://github.com/Atlas34/portainer/raw/main/Images/pihole.png",
			"name": "PiHole-Unbound",
			"note": "When the installation is complete, navigate to your.ip.goes.here:1010/admin. Follow the article \u003ca href='https://medium.com/@niktrix/getting-rid-of-systemd-resolved-consuming-port-53-605f0234f32f'\u003ehere\u003c/a\u003e if you run into issues binding to port 53.",
			"platform": "linux",
			"ports": [
				"53:53/tcp",
				"53:53/udp",
				"67:67/udp",
				"8010:80/tcp",
				"4443:443/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Pi-Hole",
			"type": 1,
			"volumes": [
				{
					"bind": "/portainer/PiHole/File",
					"container": "/etc/pihole"
				},
				{
					"bind": "/portainer/PiHole/DNS",
					"container": "/etc/dnsmasq.d"
				}
			]
		},
		{
			"categories": [
				"Other",
				"Tools"
			],
			"description": "This is a Bitwarden server API implementation written in Rust compatible with upstream Bitwarden clients*, perfect for self-hosted deployment where running the official resource-heavy service might not be ideal..",
			"image": "vaultwarden/server:latest",
			"logo": "https://github.com/Atlas34/portainer/raw/main/Images/bitwarden.png",
			"name": "vaultwarden",
			"note": "This project is not associated with the Bitwarden project nor 8bit Solutions LLC.",
			"platform": "linux",
			"ports": [
				"8090:80/tcp"
			],
			"restart_policy": "unless-stopped",
			"title": "Vaultwarden",
			"type": 1,
			"volumes": [
				{
					"bind": "/portainer/Vaultwarden",
					"container": "/data"
				}
			]
		},
		{
			"categories": [
				"Other",
				"Tools",
				"Maintenance"
			],
			"description": "With watchtower you can update the running version of your containerized app simply by pushing a new image to the Docker Hub or your own image registry. Watchtower will pull down your new image, gracefully shut down your existing container and restart it with the same options that were used when it was deployed initially.",
			"image": "containrrr/watchtower:latest",
			"logo": "https://github.com/Atlas34/portainer/raw/main/Images/watchtower.png",
			"name": "watchtower",
			"note": "It is recommended to manually update your containers but we're including this for those of you that don't care",
			"platform": "linux",
			"restart_policy": "unless-stopped",
			"title": "Watchtower",
			"type": 1,
			"volumes": [
				{
					"bind": "/var/run/docker.sock",
					"container": "/var/run/docker.sock"
				}
			]
		}
	]
}
